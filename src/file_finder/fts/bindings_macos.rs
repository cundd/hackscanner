/* automatically generated by rust-bindgen */

pub const FTS_COMFOLLOW: u32 = 1;
pub const FTS_LOGICAL: u32 = 2;
pub const FTS_NOCHDIR: u32 = 4;
pub const FTS_NOSTAT: u32 = 8;
pub const FTS_PHYSICAL: u32 = 16;
pub const FTS_SEEDOT: u32 = 32;
pub const FTS_XDEV: u32 = 64;
pub const FTS_WHITEOUT: u32 = 128;
pub const FTS_COMFOLLOWDIR: u32 = 1024;
pub const FTS_NOSTAT_TYPE: u32 = 2048;
pub const FTS_OPTIONMASK: u32 = 3327;
pub const FTS_NAMEONLY: u32 = 256;
pub const FTS_STOP: u32 = 512;
pub const FTS_BLOCK_COMPAR: u32 = 2147483648;
pub const FTS_ROOTPARENTLEVEL: i32 = -1;
pub const FTS_ROOTLEVEL: u32 = 0;
pub const FTS_MAXLEVEL: u32 = 2147483647;
pub const FTS_D: u32 = 1;
pub const FTS_DC: u32 = 2;
pub const FTS_DEFAULT: u32 = 3;
pub const FTS_DNR: u32 = 4;
pub const FTS_DOT: u32 = 5;
pub const FTS_DP: u32 = 6;
pub const FTS_ERR: u32 = 7;
pub const FTS_F: u32 = 8;
pub const FTS_INIT: u32 = 9;
pub const FTS_NS: u32 = 10;
pub const FTS_NSOK: u32 = 11;
pub const FTS_SL: u32 = 12;
pub const FTS_SLNONE: u32 = 13;
pub const FTS_W: u32 = 14;
pub const FTS_DONTCHDIR: u32 = 1;
pub const FTS_SYMFOLLOW: u32 = 2;
pub const FTS_ISW: u32 = 4;
pub const FTS_AGAIN: u32 = 1;
pub const FTS_FOLLOW: u32 = 2;
pub const FTS_NOINSTR: u32 = 3;
pub const FTS_SKIP: u32 = 4;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type dev_t = __darwin_dev_t;
pub type ino_t = __darwin_ino_t;
pub type nlink_t = __uint16_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FTS {
    pub fts_cur: *mut _ftsent,
    pub fts_child: *mut _ftsent,
    pub fts_array: *mut *mut _ftsent,
    pub fts_dev: dev_t,
    pub fts_path: *mut ::std::os::raw::c_char,
    pub fts_rfd: ::std::os::raw::c_int,
    pub fts_pathlen: ::std::os::raw::c_int,
    pub fts_nitems: ::std::os::raw::c_int,
    pub __bindgen_anon_1: FTS__bindgen_ty_1,
    pub fts_options: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FTS__bindgen_ty_1 {
    pub fts_compar: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub fts_compar_b: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_FTS__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<FTS__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(FTS__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<FTS__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(FTS__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS__bindgen_ty_1>())).fts_compar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS__bindgen_ty_1),
            "::",
            stringify!(fts_compar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS__bindgen_ty_1>())).fts_compar_b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS__bindgen_ty_1),
            "::",
            stringify!(fts_compar_b)
        )
    );
}
#[test]
fn bindgen_test_layout_FTS() {
    assert_eq!(
        ::std::mem::size_of::<FTS>(),
        72usize,
        concat!("Size of: ", stringify!(FTS))
    );
    assert_eq!(
        ::std::mem::align_of::<FTS>(),
        8usize,
        concat!("Alignment of ", stringify!(FTS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_child as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_array as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_dev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_path as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_rfd as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_rfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_pathlen as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_pathlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_nitems as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_nitems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTS>())).fts_options as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftsent {
    pub fts_cycle: *mut _ftsent,
    pub fts_parent: *mut _ftsent,
    pub fts_link: *mut _ftsent,
    pub fts_number: ::std::os::raw::c_long,
    pub fts_pointer: *mut ::std::os::raw::c_void,
    pub fts_accpath: *mut ::std::os::raw::c_char,
    pub fts_path: *mut ::std::os::raw::c_char,
    pub fts_errno: ::std::os::raw::c_int,
    pub fts_symfd: ::std::os::raw::c_int,
    pub fts_pathlen: ::std::os::raw::c_ushort,
    pub fts_namelen: ::std::os::raw::c_ushort,
    pub fts_ino: ino_t,
    pub fts_dev: dev_t,
    pub fts_nlink: nlink_t,
    pub fts_level: ::std::os::raw::c_short,
    pub fts_info: ::std::os::raw::c_ushort,
    pub fts_flags: ::std::os::raw::c_ushort,
    pub fts_instr: ::std::os::raw::c_ushort,
    pub fts_statp: *mut stat,
    pub fts_name: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__ftsent() {
    assert_eq!(
        ::std::mem::size_of::<_ftsent>(),
        112usize,
        concat!("Size of: ", stringify!(_ftsent))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftsent>(),
        8usize,
        concat!("Alignment of ", stringify!(_ftsent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_cycle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_cycle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_parent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_link as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_number as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_pointer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_accpath as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_accpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_errno as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_symfd as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_symfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_pathlen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_pathlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_namelen as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_ino as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_dev as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_nlink as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_level as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_info as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_flags as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_instr as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_instr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_statp as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_statp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ftsent>())).fts_name as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_name)
        )
    );
}
pub type FTSENT = _ftsent;
extern "C" {
    #[link_name = "\u{1}_fts_children$INODE64"]
    pub fn fts_children(arg1: *mut FTS, arg2: ::std::os::raw::c_int) -> *mut FTSENT;
}
extern "C" {
    #[link_name = "\u{1}_fts_close$INODE64"]
    pub fn fts_close(arg1: *mut FTS) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fts_open$INODE64"]
    pub fn fts_open(
        arg1: *const *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const FTSENT,
                arg2: *mut *const FTSENT,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FTS;
}
extern "C" {
    #[link_name = "\u{1}_fts_read$INODE64"]
    pub fn fts_read(arg1: *mut FTS) -> *mut FTSENT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub _address: u8,
}
